language: generic
env:
  global:
    - secure: "TxwO/pCjr7xROjXd9gEvrn1VYKiVRY2bb2DZp/fmzVZhgIZnJ9vYwkByczkctZpCG954q/iTOM9JzbucC+706E6HvZcjj4beked+yZI/+9GEXWybn3Ehf6gzRMHo7xXsq2Tscrvc951Iogb2I+ukNiXHtvlstEU9wS7DoGUAyTZaD+OTl2UDNSgN2rMMhrA8abftFUTm4HYlFFVxYgQir9eq5b3PT9wQflf7qcGQv3qk0Lzia2O+40Db/rxaWesGg/znLM4384gw9en2d+e7zshkYuhMbV/x8wB5ZPe+5wUwSyOoUOJDyjjTGJpyhLrL4ofIKEEpYGYDBfZ439Yj0ldZF/wblBEbFhh7EiXHR/jVFeL2BLObB44HgQf6/MSdIJSBcVlzx7fwNcKgwV0l1RjGD7avTE2jGsBTPa86FznG0dWEZNgKRzr6De+FgYu/7VslC7qG+Bv22xjDHJjA4ymt665ub1AZNy62qt5M2TpQufxX7WUJ+SE+PbHNMLFuFv5MZoJaADYtRqWskkwGTZHGhF4ABbS2Igt9ytlpXKBE2EsmvTEg3iPF6M41vxh9LLPmjh4usZxom2ud+czatQf3QoCR8oR2UQMVj+v1PNn4ADHoc68WLsQWK9gJALb+a+r2twwPUNvYai1frEM2kORJiUeHiVAYdCiQgLh8Cfc="
matrix:
  include:
  # linux environments
  - env:
      - PYTHON_VERSION=3.7
      - XARRAY_VERSION=0.10
    os: linux
  - env:
      - PYTHON_VERSION=3.6
      - XARRAY_VERSION=0.9
    os: linux
  - env:
      - PYTHON_VERSION=3.6
      - XARRAY_VERSION=0.8
    os: linux
  - env:
      - PYTHON_VERSION=3.5
      - XARRAY_VERSION=0.9
    os: linux
  - env:
      - PYTHON_VERSION=3.5
      - XARRAY_VERSION=0.8
    os: linux
  - env:
      - PYTHON_VERSION=2.7
      - XARRAY_VERSION=0.9
    os: linux
  - env:
      - PYTHON_VERSION=2.7
      - XARRAY_VERSION=0.8
    os: linux
  # osx environments
  - env:
      - PYTHON_VERSION=3.7
      - XARRAY_VERSION=0.10
    os: osx
  - env:
      - PYTHON_VERSION=2.7
      - XARRAY_VERSION=0.9
    os: osx
addons:  # install cdo
  apt:
    packages:
    - cdo
install:
  # select the os name for the conda installer
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        OS_NAME=MacOSX;
    else
        OS_NAME=Linux;
    fi
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - if [[ "$PYTHON_VERSION" == "2.7" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-"${OS_NAME}"-x86_64.sh -O miniconda.sh;
    else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-"${OS_NAME}"-x86_64.sh -O miniconda.sh;
    fi
  # make sure we use an 'innocent' default matplotlib environment
  - touch matplotlibrc
  - bash miniconda.sh -b -p $HOME/miniconda
  - . $HOME/miniconda/etc/profile.d/conda.sh && conda activate base
  - pip install pyyaml  # is somehow not included in the current conda installation
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # install conda build and anaconda-client for deploy
  - conda install conda-build anaconda-client
  # Useful for debugging any issues with conda
  - conda info -a
  - 'ENVKEY=py"${PYTHON_VERSION}"_xr"${XARRAY_VERSION}"'
  - conda env create -f tests/envs/environment_$ENVKEY.yml
  - conda activate psyplot_$ENVKEY
  # install python cdo bindings
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        conda install -c conda-forge cdo python-cdo;
        export CDO="$HOME/miniconda/envs/psyplot_$ENVKEY/bin/cdo";
    fi
  # install coveralls
  - pip install coveralls
  # install the test plugin
  - cd tests/test_plugin && python setup.py install && cd ../../
  # install psyplot
  - python setup.py install
  # export the environment for debugging
  - conda env export -n psyplot_$ENVKEY
  # print versions of all the important requirements
  - psyplot -aV
  # add conda-forge channel for build
  - conda config --add channels conda-forge
script:
  - coverage run --source=psyplot setup.py pytest
  - conda build ci/conda-recipe --python $PYTHON_VERSION

after_success:
  - coveralls

before_deploy:  # deactivate to use anaconda client
  - conda deactivate

deploy:
  - provider: script
    script: ci/deploy_anaconda.sh
    skip_cleanup: true
    on:
      condition: '$XARRAY_VERSION == 0.10'
      all_branches: true
