language: generic
env:
  global:
    - secure: "RKFhdSfHUajpU0YoAOMPy4uam4vZu4+PwR4mCFy2LuleWmjNCkR21+qd4PmO+RyVrWgdmazH0IW968OUOuGehQJw5rC7R3Bd1ZteFLXjoR5Yp7uZce+skI6pz/BiGQ6R3glj00gSNM0lA0s4+c6rwoPkkP99q+UoNj9YpBN+jAo/NkkDrV5higW6J05uGQs8n5bZdSJLQlN+oCenBkQU0OHNIMw/iZ8xW11plf8ijR4nVfQMPzv1NOxV+Pp0sKy/FnI0+NxUYNRzaegv9fW5xEi4v/r9UjvkjKxjYrk91ig8tpBUm6LWXIO6a+L4BVr0eeOEWDYO8jsoSqzVSEJ0W9VR/xWEzOLffcxJvssARMCAAFckq3AL99QLMpfh10w0WlztjwIRW6k2lsR3X6yb5uMnlU8UcflouZ5DigKLqIvduANM4MmRrG5e9OApCTNHcQj6bXVwVZqvWQB0qa1nhSirPz0TT4qO3HzXF2+cHceR0AToUJ33f57VgwasddSbIWuFmkWReuM3IKDYVqCWfHNc+r7XqX7BJeG7Uy46B61a9mCpLpsGLMIQpiHCmuJMG4isXzpQyfPc75w6te37nxulVIRzAN2thngGpDGQYUCN2WfXyzV4oT6ci9GKcIRJ6gcil6Woi5pMRp2HNDUzvilDcb3zH2zgx4SbonuiDak="
matrix:
  include:
  # linux environments
  - env:
      - PYTHON_VERSION=3.7
      - XARRAY_VERSION=0.10
    os: linux
  - env:
      - PYTHON_VERSION=3.6
      - XARRAY_VERSION=0.9
    os: linux
  - env:
      - PYTHON_VERSION=3.6
      - XARRAY_VERSION=0.8
    os: linux
  - env:
      - PYTHON_VERSION=3.5
      - XARRAY_VERSION=0.9
    os: linux
  - env:
      - PYTHON_VERSION=3.5
      - XARRAY_VERSION=0.8
    os: linux
  - env:
      - PYTHON_VERSION=2.7
      - XARRAY_VERSION=0.9
    os: linux
  - env:
      - PYTHON_VERSION=2.7
      - XARRAY_VERSION=0.8
    os: linux
  # osx environments
  - env:
      - PYTHON_VERSION=3.7
      - XARRAY_VERSION=0.10
    os: osx
  - env:
      - PYTHON_VERSION=2.7
      - XARRAY_VERSION=0.9
    os: osx
addons:  # install cdo
  apt:
    packages:
    - cdo
install:
  # select the os name for the conda installer
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        OS_NAME=MacOSX;
    else
        OS_NAME=Linux;
    fi
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - if [[ "$PYTHON_VERSION" == "2.7" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-"${OS_NAME}"-x86_64.sh -O miniconda.sh;
    else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-"${OS_NAME}"-x86_64.sh -O miniconda.sh;
    fi
  # make sure we use an 'innocent' default matplotlib environment
  - touch matplotlibrc
  - bash miniconda.sh -b -p $HOME/miniconda
  - . $HOME/miniconda/etc/profile.d/conda.sh && conda activate base
  - pip install pyyaml  # is somehow not included in the current conda installation
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a
  - 'ENVKEY=py"${PYTHON_VERSION}"_xr"${XARRAY_VERSION}"'
  - conda env create -f tests/envs/environment_$ENVKEY.yml
  - conda activate psyplot_$ENVKEY
  # install python cdo bindings
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        conda install -c conda-forge cdo python-cdo;
        export CDO="$HOME/miniconda/envs/psyplot_$ENVKEY/bin/cdo";
    fi
  # install coveralls
  - pip install coveralls
  # install the test plugin
  - cd tests/test_plugin && python setup.py install && cd ../../
  # install psyplot
  - python setup.py install
  # export the environment for debugging
  - conda env export -n psyplot_$ENVKEY
  # print versions of all the important requirements
  - psyplot -aV
script:
  - coverage run --source=psyplot setup.py pytest

after_success:
  - coveralls

before_deploy:
  - conda install conda-build anaconda-client
  - conda build ci/conda-recipe --python $PYTHON_VERSION
  - export BUILDS="$(ls $HOME/miniconda/conda-bld/${TRAVIS_OS_NAME}-64/*.tar.bz2)";

deploy:
  - provider: script
    script: ci/deploy_anaconda.sh
    skip_cleanup: true
    on:
      condition: '$XARRAY_VERSION == 0.10'
