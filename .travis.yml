language: generic
env:
  global:
    - secure: "FnfYmn2KQLCmLVPDQ5rRSyunT8rEh/HsBejTCEX34oWnYMp3FGPWJC2je/KvTV18EORZ5KhiHBvkqMnmm6WvEbCJhX/snBTufco74famK44hriEzZ0z+u5hDt8tifjhIEtI+zJXrSDvgcoa2piOlRb9SAnWBGhtGMVYX5oFgyH0zya9OFdw+tC7oUddi+2XkInZt8GfnBya83jE4sfxGj0F9dQYAoVGV0RPE1bHnk+vXpCpPuJgwFRolou5z7yr+MWDMZQ6dm3ocCHJ977w/x0fHyRSLXti2ZsGNKKU4p109y/4E1s9p9lYIRg61LsS5XUrQBcwTJ+x6avmFFnNNlPYKFg0H/cshXS1BiCrM+CNHW5gU0o+qKfdnjc4JJ4SZ3f+4viP1rv0EpLjHdDyrvB0Dk0WpS+eVIloa0S1IVhQenDbiM2ehBvyYNdSiczj6cXple0DSF8o87r2cRYfOyQuEOTJvmJs117PVeMCGy86jrI6kKfs7v4L3KJqxY8DcNFUnCHGio+e4KE5HIuYgXqNvJAbGHzs8SRPROhaRWM7OlCMKsdrGZLtPKTl7lI7j/rco0hg/53S/36uR74DmwAu0LS+I5/WyXgNYjvbys/xKeyfChRVWkfN7z8zI70dx/E74WRHBchtnZIvxO432+cyK61fwC9nX6s+X0swY4MY="
matrix:
  include:
  # linux environments
  - env:
      - PYTHON_VERSION=3.7
      - XARRAY_VERSION=0.12
      - DEPLOY_CONDA=true
    os: linux
  - env:
      - PYTHON_VERSION=3.7
      - XARRAY_VERSION=0.11
    os: linux
  - env:
      - PYTHON_VERSION=3.7
      - XARRAY_VERSION=0.10
    os: linux
  - env:
      - PYTHON_VERSION=3.6
      - XARRAY_VERSION=0.9
      - DEPLOY_CONDA=true
    os: linux
  - env:
      - PYTHON_VERSION=3.6
      - XARRAY_VERSION=0.8
    os: linux
  - env:
      - PYTHON_VERSION=3.5
      - XARRAY_VERSION=0.9
      - DEPLOY_CONDA=true
    os: linux
  - env:
      - PYTHON_VERSION=3.5
      - XARRAY_VERSION=0.8
    os: linux
  # osx environments
  - env:
      - PYTHON_VERSION=3.7
      - XARRAY_VERSION=0.12
      - DEPLOY_CONDA=true
    os: osx
    - env:
        - PYTHON_VERSION=3.7
        - XARRAY_VERSION=0.11
      os: osx
  - env:
      - PYTHON_VERSION=3.7
      - XARRAY_VERSION=0.10
    os: osx
addons:  # install cdo
  apt:
    packages:
    - cdo
install:
  # select the os name for the conda installer
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        OS_NAME=MacOSX;
    else
        OS_NAME=Linux;
    fi
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-"${OS_NAME}"-x86_64.sh -O miniconda.sh
  # make sure we use an 'innocent' default matplotlib environment
  - touch matplotlibrc
  - bash miniconda.sh -b -p $HOME/miniconda
  - . $HOME/miniconda/etc/profile.d/conda.sh && conda activate base
  - pip install pyyaml  # is somehow not included in the current conda installation
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # install conda build and anaconda-client for deploy
  - conda install conda-build anaconda-client
  # Useful for debugging any issues with conda
  - conda info -a
  - 'ENVKEY=py"${PYTHON_VERSION}"_xr"${XARRAY_VERSION}"'
  - conda env create -f tests/envs/environment_$ENVKEY.yml
  - conda activate psyplot_$ENVKEY
  # install python cdo bindings
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        conda install -c conda-forge cdo python-cdo;
        export CDO="$HOME/miniconda/envs/psyplot_$ENVKEY/bin/cdo";
    fi
  - if [[ $TRAVIS_TAG == "" ]]; then export GIT_BRANCH=$TRAVIS_BRANCH; fi
  # install coveralls
  - pip install coveralls
  # install the test plugin
  - cd tests/test_plugin && python setup.py install && cd ../../
  # install psyplot
  - python setup.py install
  # export the environment for debugging
  - conda env export -n psyplot_$ENVKEY
  # print versions of all the important requirements
  - psyplot -aV
  # add conda-forge channel for build
  - conda config --add channels conda-forge
script:
  - coverage run --source=psyplot setup.py test -a "-v"
  - conda build ci/conda-recipe --python $PYTHON_VERSION

after_success:
  - coveralls

before_deploy:  # deactivate to use anaconda client
  - conda deactivate

deploy:
  - provider: script
    script: ci/deploy_anaconda.sh
    skip_cleanup: true
    on:
      condition: '$DEPLOY_CONDA == true'
      all_branches: true
  - provider: script
    script: ci/deploy_anaconda.sh
    skip_cleanup: true
    on:
      condition: '$DEPLOY_CONDA == true'
      tags: true
